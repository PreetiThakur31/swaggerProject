/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.Customer;
import io.swagger.model.CustomerATMDetails;
import io.swagger.model.ErrorResponse;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-02T12:34:28.497Z")

@Api(value = "Customer", description = "the addCustomer API")
public interface CustomerApi {

    @ApiOperation(value = "Add a new customer", nickname = "addcustomer", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Parameter do not match the expected format.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error Occured.", response = ErrorResponse.class) })
    @RequestMapping(value = "/addCustomer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addcustomer(@ApiParam(value = "Customer object that needs to be stored" ,required=true )  @Valid @RequestBody Customer body);

    
    
    
    @ApiOperation(value = "Delete an existing customer", nickname = "deleteCustomer", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Parameter do not match the expected format.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error Occured.", response = ErrorResponse.class) })
    @RequestMapping(value = "/deleteCustomerById",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCustomer(@NotNull @ApiParam(value = "Customer object that needs to be stored", required = true) @Valid @RequestParam(value = "customerId", required = true) String customerId);

    
    
    
    @ApiOperation(value = "Find  an existing customer", nickname = "findCustomer", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Parameter do not match the expected format.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error Occured.", response = ErrorResponse.class) })
    @RequestMapping(value = "/findCustomerById",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Void> findCustomer(@NotNull @ApiParam(value = "Customer object that needs to be stored", required = true) @Valid @RequestParam(value = "customerId", required = true) String customerId);

    @ApiOperation(value = "Update an existing customer", nickname = "updateCustomer", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Parameter do not match the expected format.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error Occured.", response = ErrorResponse.class) })
    @RequestMapping(value = "/updateCustomer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCustomer(@ApiParam(value = "Customer object that needs to be stored" ,required=true )  @Valid @RequestBody Customer body);

    @ApiOperation(value = "get customer ATM details", nickname = "saveCustomerATMDetails", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Parameter do not match the expected format.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error Occured.", response = ErrorResponse.class) })
    @RequestMapping(value = "/CustomerATMDetails",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> saveCustomerATMDetails(@NotNull @ApiParam(value = "Customer ATM object that needs to be fetched", required = true) @Valid @RequestParam(value = "customerId", required = true) String customerId,@ApiParam(value = "Customer object that needs to be stored" ,required=true )  
    @Valid @RequestBody CustomerATMDetails body);
    
    @ApiOperation(value = "get customer ATM details", nickname = "getCustomerATMDetails", notes = "", response = CustomerATMDetails.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CustomerATMDetails.class),
        @ApiResponse(code = 400, message = "Parameter do not match the expected format.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error Occured.", response = ErrorResponse.class) })
    @RequestMapping(value = "/getCustomerATMDetails",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<CustomerATMDetails> getCustomerATMDetails(@NotNull @ApiParam(value = "Customer ATM object that needs to be fetched", required = true) @Valid @RequestParam(value = "customerId", required = true) String customerId);


}
